CREATE DATABASE BBDD_projecte;

-- Tabla de SUSCRIPCIONES
CREATE TABLE SUSCRIPCIONES (
    id_suscripciones INT PRIMARY KEY,
    tipo VARCHAR(20) NOT NULL,
    precio INT
);

-- Tabla de USUARIOS
CREATE TABLE USUARIOS (
    id_usuarios BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR(100),
    apellido VARCHAR(100),
    email VARCHAR(150) UNIQUE,
    contraseña VARCHAR(150),
    fecha_registro DATE DEFAULT CURRENT_DATE,
    id_suscripciones INT NOT NULL DEFAULT 1, 
    fecha_inicio_suscripcion DATE DEFAULT CURRENT_DATE,
    fecha_final_suscripcion DATE NULL,
    FOREIGN KEY (id_suscripciones) REFERENCES SUSCRIPCIONES(id_suscripciones) ON DELETE CASCADE
);

-- Tabla de RUTAS
CREATE TABLE RUTAS (
    id_ruta INT PRIMARY KEY,
    nombre_ruta VARCHAR(100),
    dificultad VARCHAR(50),
    ubicacion VARCHAR(150),
    descripcion VARCHAR(255)
);

-- Tabla de HISTORIAL DE ACTIVIDADES
CREATE TABLE historial_actividades (
    id_historial INT PRIMARY KEY,
    id_usuarios INT,
    id_ruta INT,
    fecha DATE,
    FOREIGN KEY (id_usuarios) REFERENCES USUARIOS(id_usuarios) ON DELETE CASCADE,
    FOREIGN KEY (id_ruta) REFERENCES RUTAS(id_ruta) ON DELETE CASCADE
);

-- Tabla de ANUNCIOS
CREATE TABLE ANUNCIOS (
    id_anuncios INT PRIMARY KEY,
    titulo VARCHAR(100),
    contenido VARCHAR(225),
    id_suscripciones INT,
    FOREIGN KEY (id_suscripciones) REFERENCES SUSCRIPCIONES(id_suscripciones) ON DELETE CASCADE
);

-- Tabla de relación SUSCRIPCIONES-ANUNCIOS
CREATE TABLE SUSCRIPCIONES_ANUNCIOS (
    id_SA INT PRIMARY KEY,
    id_suscripciones INT,
    id_anuncios INT,
    num_veces_mostrado INT,
    FOREIGN KEY (id_suscripciones) REFERENCES SUSCRIPCIONES(id_suscripciones) ON DELETE CASCADE,
    FOREIGN KEY (id_anuncios) REFERENCES ANUNCIOS(id_anuncios) ON DELETE CASCADE
);


-- Trigger para la tabla Usuarios



CREATE OR REPLACE FUNCTION reset_identity_if_empty()
RETURNS TRIGGER AS $$
DECLARE
    total_registros INT;
BEGIN
    -- Contar cuántos registros quedan en la tabla usuarios
    SELECT COUNT(*) INTO total_registros FROM usuarios;

    -- Si la tabla está vacía, reiniciar el IDENTITY
    IF total_registros = 0 THEN
        -- Reinicia el ID sin afectar transacciones activas
        PERFORM pg_advisory_lock(12345); -- Bloquea para evitar concurrencia
        EXECUTE 'ALTER TABLE usuarios ALTER COLUMN id_usuarios RESTART WITH 1';
        PERFORM pg_advisory_unlock(12345); -- Desbloquea después de la ejecución
    END IF;

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER trigger_reset_identity
AFTER DELETE ON usuarios
FOR EACH STATEMENT
EXECUTE FUNCTION reset_identity_if_empty();



